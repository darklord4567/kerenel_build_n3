name: Build Kernel for OnePlus Nord 3 (MT6983)

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE_URL:
        description: 'URL to the GKI kernel source code'
        required: true
        default: 'https://github.com/OnePlusOSS/android_kernel_5.10_oneplus_mt6983'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch of the kernel source'
        required: true
        default: 'oneplus/mt6983_v_15.0.0_nord_3'
      KERNEL_MODULES_URL:
        description: 'URL to the vendor kernel modules repository'
        required: true
        default: 'https://github.com/OnePlusOSS/android_kernel_modules_oneplus_mt6983'
      KERNEL_MODULES_BRANCH:
        description: 'Branch of the kernel modules repository'
        required: true
        default: 'oneplus/mt6983_v_15.0.0_nord_3'
      BUILD_USER:
        description: 'Custom user name embedded in the kernel version string (uname -a)'
        required: false
        default: 'LuffyOP_stock_'
      CUSTOM_SUFFIX:
        description: 'Custom suffix for the kernel version string and zip file name (leave empty for random)'
        required: false
        default: 'LuffyOP_stock_'
      FAST_BUILD:
        type: boolean
        description: 'Enable fast build using a specific GKI-compatible Clang toolchain and ccache?'
        required: true
        default: true

jobs:
  build:
    name: Build GKI Kernel for OnePlus Nord 3
    runs-on: ubuntu-22.04
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 8G
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          swap-size-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Luffy-456"
          git config --global user.email "anshuman567.in@gmail.com"

      - name: Configure APT
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: Set APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git libssl-dev libncurses5-dev bc bison flex libelf-dev ccache gcc-aarch64-linux-gnu

      - name: Restore Ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.workflow }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.workflow }}-${{ github.ref_name }}-

      - name: Initialize Ccache
        run: |
          INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "Initializing ccache..."
              ccache -M ${{ env.CCACHE_MAXSIZE }}
              touch "$INIT_FLAG"
              echo "ccache initialization complete"
            else
              echo "ccache already initialized, skipping"
            fi
          fi
          ccache -s

      - name: Install Toolchain (Fast Build)
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        run: |
          echo "Setting up Proton Clang toolchain for GKI Fast Build"
          git clone https://github.com/kdrag0n/proton-clang --depth=1 clang-toolchain
      
      - name: Remove LLD binary from Proton Clang to prevent host tool build errors
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        run: |
          echo "Removing Proton Clang's internal ld to prevent host linker issues"
          rm -f clang-toolchain/bin/ld
          
      - name: Install Toolchain (Standard Build)
        if: ${{ github.event.inputs.FAST_BUILD == 'false' }}
        run: |
          echo "Setting up GCC toolchain for Standard Build"
          git clone https://github.com/mvaisakh/gcc-arm64.git --depth=1 gcc-arm64
          git clone https://github.com/mvaisakh/gcc-arm.git --depth=1 gcc-arm

      - name: Clone Kernel Source
        run: |
          git clone --depth=1 --single-branch -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} ${{ github.event.inputs.KERNEL_SOURCE_URL }} kernel


      - name: Clone Vendor Modules Repo Separately
        run: |
          git clone --depth=1 --single-branch -b ${{ github.event.inputs.KERNEL_MODULES_BRANCH }} \
            ${{ github.event.inputs.KERNEL_MODULES_URL }} vendor_modules

      - name: move vendor from vendor_modules
        run: |
          mv vendor_modules/vendor .

      - name: Debug check final vendor path
        run: |
          ls -l vendor/oplus/kernel/cpu/sched/Kconfig



      - name: Set Custom Kernel Suffix
        id: suffix_step
        run: |
          SETLOCALVERSION_PATH="kernel/scripts/setlocalversion"
          FINAL_SUFFIX=""
          
          if [ -n "${{ github.event.inputs.CUSTOM_SUFFIX }}" ]; then
            FINAL_SUFFIX="${{ github.event.inputs.CUSTOM_SUFFIX }}"
          else
            # Generate a random suffix in the format from fast.txt
            RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
            RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
            FINAL_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"
          fi
          
          echo "Final Suffix: $FINAL_SUFFIX"
          # Set output for later steps
          echo "suffix=$FINAL_SUFFIX" >> $GITHUB_OUTPUT

          # Modify the setlocalversion script to append the suffix
          if [ -f "$SETLOCALVERSION_PATH" ]; then
            echo "Modifying $SETLOCALVERSION_PATH to add suffix and remove -dirty tag"
            # Remove -dirty tag
            sed -i 's/ -dirty//g' "$SETLOCALVERSION_PATH"
            # Append the suffix before the final echo
            tac "$SETLOCALVERSION_PATH" | sed "0,/echo \"\\\$res\"/s//res=\"\\\$res-\$FINAL_SUFFIX\"; echo \"\\\$res\"/" | tac > "$SETLOCALVERSION_PATH.tmp" && mv "$SETLOCALVERSION_PATH.tmp" "$SETLOCALVERSION_PATH"
            chmod +x "$SETLOCALVERSION_PATH"
          else
            echo "Warning: $SETLOCALVERSION_PATH not found. Cannot apply custom suffix."
          fi

      - name: Configure and Build Kernel
        working-directory: kernel
        run: |
          {
            set -x
            export ARCH=arm64
            export SUBARCH=arm64
            export KBUILD_BUILD_USER="${{ github.event.inputs.BUILD_USER }}"
            
            MAKE_ARGS=""
            
            if [ "${{ github.event.inputs.FAST_BUILD }}" = "true" ]; then
              echo "Using specific Clang for GKI build"
              export PATH="${{ github.workspace }}/clang-toolchain/bin:${PATH}"
              export CLANG_TRIPLE="aarch64-linux-gnu-"
              export CROSS_COMPILE="aarch64-linux-gnu-"
              export CC="ccache clang"
              export LD=ld.lld
              export AR=llvm-ar
              export NM=llvm-nm
              export OBJCOPY=llvm-objcopy
              export OBJDUMP=llvm-objdump
              export STRIP=llvm-strip
              # Fix for linker incompatibility on newer hosts by using the host's native compiler for host tools
              MAKE_ARGS="HOSTCC=gcc HOSTCXX=g++ HOSTLD=/usr/bin/ld"
            else
              echo "Using GCC for build"
              export CROSS_COMPILE_ARM32=${{ github.workspace }}/gcc-arm/bin/arm-eabi-
              export CROSS_COMPILE=${{ github.workspace }}/gcc-arm64/bin/aarch64-elf-
            fi
            
            echo "--- Configuring Kernel for GKI Build ---"
            # This defconfig is expected to be GKI-aware
            make O=out ${MAKE_ARGS} vendor/oplus_defconfig

            echo "--- Building GKI Kernel Image and Vendor Modules ---"
            # The make command will build the GKI kernel (Image.gz-dtb)
            make O=out -j$(nproc --all) ${MAKE_ARGS}
            # The 'modules' target will build all necessary vendor kernel modules (.ko files)
            make O=out -j$(nproc --all) ${MAKE_ARGS} modules
          } 2>&1 | tee ../build.log

      - name: Create AnyKernel3 Zip
        run: |
          # This step packages the kernel for flashing via custom recovery.
          git clone https://github.com/osm0sis/AnyKernel3.git
          # Copy the compiled GKI kernel image
          cp kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          # Create a directory for vendor modules and copy them
          mkdir -p AnyKernel3/modules
          find kernel/out -type f -name "*.ko" -exec cp -f {} AnyKernel3/modules/ \;
          # Create the flashable zip with the dynamic suffix
          cd AnyKernel3
          zip -r9 ../Kernel-OnePlus-Nord-3-${{ steps.suffix_step.outputs.suffix }}.zip * -x .git README.md

      - name: Upload Build Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          
      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-OnePlus-Nord-3-${{ steps.suffix_step.outputs.suffix }}
          path: Kernel-OnePlus-Nord-3-*.zip
